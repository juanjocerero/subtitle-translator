#!/usr/bin/env bash

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
INSTALL_DIR="$HOME/.local/share/subtitle-translator"
CONFIG_DIR="$HOME/.config/subtitle-translator"
VENV_DIR="$INSTALL_DIR/venv"
LOG_FILE="$CONFIG_DIR/translation.log"

# Ensure directories exist
mkdir -p "$INSTALL_DIR"
mkdir -p "$CONFIG_DIR"

# Determine script locations
if [ -f "$SCRIPT_DIR/src/translator.py" ]; then
    # Running from project directory
    PYTHON_SCRIPT="$SCRIPT_DIR/src/translator.py"
    REQUIREMENTS="$SCRIPT_DIR/requirements.txt"
else
    # Running from installed location
    PYTHON_SCRIPT="/usr/local/lib/subtitle-translator/translator.py"
    REQUIREMENTS="/usr/local/lib/subtitle-translator/requirements.txt"
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Error message function
error() {
    echo -e "${RED}Error: $1${NC}" >&2
    exit 1
}

# Success message function
success() {
    echo -e "${GREEN}$1${NC}"
}

# Warning message function
warning() {
    echo -e "${YELLOW}$1${NC}"
}

# Check dependencies
check_dependencies() {
    if ! command -v python3 &> /dev/null; then
        error "Python 3 is not installed"
    fi
    
    if ! command -v pip3 &> /dev/null; then
        error "pip3 is not installed"
    fi
}

# Setup virtual environment
setup_venv() {
    if [ ! -d "$VENV_DIR" ]; then
        echo "ðŸ“¦ Creating virtual environment..."
        mkdir -p "$INSTALL_DIR" || error "Could not create installation directory"
        python3 -m venv "$VENV_DIR" || error "Could not create virtual environment"
        source "$VENV_DIR/bin/activate"
        echo "ðŸ“¥ Installing dependencies..."
        pip install -r "$REQUIREMENTS" || error "Error installing dependencies"
        success "âœ… Environment setup complete"
    else
        source "$VENV_DIR/bin/activate"
    fi
}

# Check input file
check_input_file() {
    local file="$1"
    if [ ! -f "$file" ]; then
        error "File '$file' does not exist"
    fi
    if [[ ! "$file" =~ \.srt$ ]]; then
        error "File must have .srt extension"
    fi
}

# Show help
show_help() {
    cat << EOF
Usage: translate-subs [options] input.srt [output.srt]

Options:
  -h, --help              Show this help message
  -l, --list-languages   List supported languages
  -e, --extended         Enable support for all languages
  -s, --source LANG      Source language (autodetect by default)
  -t, --target LANG      Target language (spanish by default)
  -c, --config FILE      Configuration file
  --clean                Remove temporary files and logs
  --version             Show version

Examples:
  translate-subs movie.srt
  translate-subs -t french movie.srt
  translate-subs -e -s japanese movie.srt
  translate-subs --list-languages

For more information, visit: https://github.com/yourusername/subtitle-translator
EOF
}

# Clean temporary files
clean_files() {
    rm -f "$CONFIG_DIR/translation_checkpoint.json"
    rm -f "$LOG_FILE"
    success "âœ… Temporary files cleaned"
}

# Main function
main() {
    local source_lang=""
    local target_lang="spanish"
    local extended=""
    local config_file=""
    local input_file=""
    local output_file=""
    
    # Process arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -l|--list-languages)
                python3 "$PYTHON_SCRIPT" --list-languages $extended
                exit 0
                ;;
            -e|--extended)
                extended="--extended-languages"
                shift
                ;;
            -s|--source)
                source_lang="--source $2"
                shift 2
                ;;
            -t|--target)
                target_lang="$2"
                shift 2
                ;;
            -c|--config)
                config_file="--config $2"
                shift 2
                ;;
            --clean)
                clean_files
                exit 0
                ;;
            --version)
                echo "translate-subs v1.0.0"
                exit 0
                ;;
            *)
                if [[ -z "$input_file" ]]; then
                    input_file="$1"
                    check_input_file "$input_file"
                elif [[ -z "$output_file" ]]; then
                    output_file="$1"
                else
                    error "Unrecognized argument: $1"
                fi
                shift
                ;;
        esac
    done
    
    # Check input file
    if [[ -z "$input_file" ]]; then
        error "You must specify an input file"
    fi
    
    # Check environment
    check_dependencies
    setup_venv
    
    # Build command
    cmd="python3 $PYTHON_SCRIPT $input_file"
    [[ -n "$output_file" ]] && cmd="$cmd $output_file"
    [[ -n "$source_lang" ]] && cmd="$cmd $source_lang"
    [[ -n "$target_lang" ]] && cmd="$cmd --target $target_lang"
    [[ -n "$config_file" ]] && cmd="$cmd $config_file"
    [[ -n "$extended" ]] && cmd="$cmd $extended"
    
    # Execute translator
    echo "ðŸ”„ Starting translation..."
    eval "$cmd"
    
    # Deactivate virtual environment
    deactivate
}

# Execute script
main "$@"
